# Wright# ADL: Comprehensive Syntax and Semantics Guide

## OVERVIEW

**Wright#** is an **Architecture Description Language (ADL)** designed to model **software architecture** using the *Component & Connector (C&C)* paradigm. It extends the original Wright ADL with better support for:
- Architecture styles (e.g., Client-Server, Publish-Subscribe)
- Formal **behavioral modeling** via **Communicating Sequential Processes (CSP)**
- Automated **formal verification** using the **PAT (Process Analysis Toolkit)**

---

## SYNTAX STRUCTURE AND SEMANTICS

## SEMANTICS SUMMARY

Wright# semantics are defined in terms of **CSP process algebra**, transformed into PAT’s **Labelled Transition System (LTS)** for verification.

### Key Process Expressions:

| Syntax           | Description                                      |
|------------------|--------------------------------------------------|
| `e → P`          | Event followed by process `P`                    |
| `ch!p → P`       | Send data `p` over channel `ch`                  |
| `ch?p → P`       | Receive data `p` from channel `ch`               |
| `P || Q`         | Parallel composition                             |
| `P ||| Q`        | Interleaving composition                         |
| `P <*> Q`        | **Coupling** (PAT extension for nested roles)    |
| `Stop`           | Deadlock process                                 |
| `Skip`           | Successful termination                           |

---

## Coupling Semantics: `P <*> Q`

Coupling allows **a port to sequentially call two nested roles**, enabling complex multi-tier or service compositions.

#### Example:

attach PassengerUI.call() = callwire.requester(23) <*> paywire.publisher(42);
`PassengerUI.call()` first executes `callwire.requester(23)` and its attached ports and then `paywire.publisher(42)`.
---

## Wright# specifications consist of **three core elements**:

---

### 1. Connector Definitions

#### General Syntax Template:
connector <ConnectorName> {
    role <RoleName>(<param>?) = <ProcessExpression>;
    ...
}

#### Semantics
- A `connector` defines a reusable interaction pattern between roles.
- Each `role` represents a participant in the communication and is described using CSP-style processes.
- Each `role` has role name and may have a parameter j. If the role has a parameter, it indicates that the data came in from the role.
- Channels (`ch!`, `ch?`) are used for communication.

####  Output Role vs Input Roles
- Output Role: The role that starts with an event and sends data via ch!j. It typically introduces a parameter (e.g., role publisher(j)).

- Input Roles: Roles that consume data sent by the output role. They include channels like ch?j in their process. 
If a connector has multiple input roles, their order is determined by the communication chain: The first role to receive from the output role is the first input role. The next role involved in data flow (e.g., via a second !/?) is the second input role.

#### Example
connector CSConnector {
    role client(j) = request → req!j → res?j → process → client(j);
    role server() = req?j → invoke → process → res!j → server();
}

#### Explanation:
- The execution process begins with the client role, which is parameterized by j to represent the specific data instance. The interaction starts at the request event, followed by the first output channel req!j, where the client sends a request. This output matches with the corresponding input channel req?j in the server role, enabling the server to receive the request. The server then proceeds through its internal process, beginning with the invoke event and entering the process stage, indicating that the server is now actively handling the request. After completing the process, the server sends a response via the output channel res!j, which is then matched by the input channel res?j in the client role. Finally, the client continues to process and loops back, completing one cycle of interaction.
- A **Client-Server** connector where `client` sends a request and waits for a response.
- `server` receives the request, processes it, and responds.

#### Example: ESConnector (3-role)
connector ESConnector { 
    role eventpublisher(j) = process -> pevt!j -> sevt?j -> bevt!j -> broadcast -> Skip;
    role eventsubscriber() = bevt?j -> process -> eventsubscriber();
    role eventstore() = pevt?j -> process -> sevt!j -> persist -> eventstore();
}
#### Explanation:
- Role Classification: 
-- eventpublisher: Output role. Initiates with parameter j. Sends data via pevt!j to pevt?j in eventstore.
-- eventstore: First input role. Receives pevt?j, followed by a process before other channel got involved in that sequence, then sends sevt!j back to eventpubliser.
-- eventsubscriber: Second input role. After eventpubisher get sevt?j, it followed by bevt!j, so send it to eventsubscriber. It receives bevt?j, then processes.

- Behavioral Flow:
attach A.P1.trigger() = eventwire.eventpublisher;
attach B.P2.store()   = eventwire.eventstore;
attach C.P3.listen()  = eventwire.eventsubscriber;
- The behavioral sequence is:
A.P1 → eventpublisher → eventstore → B.P2 → eventsubscriber → C.P3

---

### 2. Component Definitions

#### General Syntax Template:
component <ComponentName> {
    port <PortName>() = <ProcessExpression>;
    ...
}

#### Semantics
- A `component` models a computation unit.
- Each `port` defines the interaction behavior of the component.
- Ports are associated with roles of connectors via attachments.

#### Example
component PassengerUI { 
	 port call() = callride->call();
}

component DriverUI { 
	 port notify() = notified->notify();
}

#### Explanation:
- PassengerUI is the passenger’s interface component. Its port call() models the ride-request action, where the event callride represents the passenger initiating a ride. The process callride -> call() means the user can make ride requests.
- DriverUI is the driver’s interface component. Its port notify() models receiving ride notifications. The event notified represents an incoming alert from the system. The process notified -> notify() means the driver can receive ride notifications.

---

### 3. System Configuration

#### General Syntax Template
system <SystemName> {
    declare <InstanceName> = <ConnectorType>;
    attach <Component.Port()> = <Instance.Role()>;
    ...
    execute <ProcessComposition>;
}

#### Semantics
- The `system` section instantiates connectors, binds components to roles, and defines how the system executes.
- `execute` combines all processes using CSP operators:
  - `||` for parallel


#### Example
system ridecalling {
    declare callwire = CSConnector;
    declare assign = PSConnector;
    attach PassengerUI.call() = callwire.requester(10);
	  attach TripMgmt.accept() = callwire.responder() <*> assignwire.publisher(94);
	  attach DriverUI.notify() = assignwire.subscriber();
    execute PassengerUI.call() || TripMgmt.accept() || DriverUI.notify();
}

#### Explanation:
- The call request from PassengerUI.call() flows through callwire from requester to responder, activates TripMgmt.accept(), which, via <*> coupling, triggers assignwire.publisher, leading to assignwire.subscriber and notifying DriverUI.notify().
- Executes three processes in parallel.

---

## Assertions (Verification Properties) for Wright# specifications

### General Syntax Template

assert <SystemName> |= <LTL_Formula>;

### Semantics
- Used to formally verify system behavior:
  - **LTL properties**: Logic formulas specifying desired temporal behavior.

### Liveness Property for behavioral proprerties

### General Syntax Template of Livness property Syntax for Wright# ADL
assert SystemName |= [] (ComponentName.portName.initial_event -> () ComponentName.portName.target_event);

### Semantics
It describe that it is globally true that a initial event will eventually trigger the target event.

#### Examples:

assert ridecalling |= [](PassengerUI.call.callride -> <> DriverUI.notify.notified);
#### Explanation:
- Ensures that whenever Passengers call a ride, the Driver can eventually be notified about the ride.

assert fooddelivery |= [](CustomerUI.reportC.report_issue -> <> SupportCenter.handle.investigate);
#### Explanation:
- Ensures that whenever CustomerUI reports an issue, the SupportCenter can eventually investigate the issue.

---

## System Misconfiguration: Multiple Attachments to the Same Input Role in Wright# ADL
###  General Description
In Wright# ADL, a connector role defines a point of communication between components. Each input role (e.g., responder, subscriber, readstore) is intended to receive data from exactly one source component port.
Misconfiguration occurs when the same input role of a connector is attached to more than one component port. This results in non-deterministic system behavior, violating Wright#'s well-formedness rules.

### Why It’s a Problem
Ambiguity: The system cannot determine which component should handle the data. Non-determinism: Execution traces become unclear or invalid. Tool failure: Formal verification tools like PAT may reject or misinterpret the architecture.

#### Example of Invalid Configuration

declare Aconnector = CSConnector;
attach cp1 = Aconnector.requester(12);
attach cp2 = Aconnector.responder();
attach cp3 = Aconnector.responder();

- Problem: Aconnector.responder is an input role. It is attached to both cp2 and cp3. This violates the rule.

#### Corrected Configuration Using a New Connector and Coupling
- Fix Strategy: Introduce a new connector of the same type. Split the attachments so each input role is uniquely bound. Use the <*> (coupling operator) to define sequential flow.

- Fixed Version

declare Aconnector = CSConnector;
declare Bconnector = CSConnector;
attach cp1 = Aconnector.requester(12) <*> Bconnector.requester(13);
attach cp2 = Aconnector.responder();
attach cp3 = Bconnector.responder();

- Resulting Behavior Flow
cp1 → Aconnector.requester(12) → Aconnector.responder → cp2 → Bconnector.requester(13) → Bconnector.responder → cp3

- This ensuresThe control flow moves sequentially through two connectors. The system is now well-formed and suitable for formal verification.

---

Here are some example software systems in the Wright# Specifications.

1. Ride Sharing System (RRS)

1.1 Wright# ADL Specification of the RRS system:

connector CSConnector { 
	 role requester(j) = process -> req!j -> res?j -> Skip;
	 role responder() = req?j -> invoke -> process -> res!j -> responder();
 }
connector ROConnector { 
	 role extquerier(j) = request -> uid!j -> res?j -> process -> Skip;
	 role blocksupplier() = uid?j -> process -> res!j -> blocksupplier();
 }
connector ESConnector { 
	 role eventpublisher(j) = process -> pevt!j -> sevt?j -> bevt!j -> broadcast -> Skip;
	 role eventsubscriber() = bevt?j -> process -> eventsubscriber();
	 role eventstore() = pevt?j -> process -> sevt!j -> persist -> eventstore();
 }
connector CRConnector { 
	 role readstore() = stmt?j -> process -> persist -> readstore();
	 role commander(j) = process -> stmt!j -> cmmd!j -> Skip;
	 role commandstore() = cmmd?j -> process -> persist -> commandstore();
 }
connector WRConnector { 
	 role writer(j) = process -> req!j -> res?j -> Skip;
	 role writestorage() = req?j -> invoke -> process -> res!j -> writestorage();
 }
connector REConnector { 
	 role reader(j) = process -> req!j -> res?j -> Skip;
	 role readstorage() = req?j -> invoke -> process -> res!j -> readstorage();
 }
connector PSConnector { 
	 role publisher(j) = process -> pub!j -> Skip;
	 role subscriber() = pub?j -> process -> subscriber();
 }
connector QRConnector { 
	 role querier(j) = process -> stmt!j -> res?j -> Skip;
	 role readstore() = stmt?j -> process -> res!j -> readstore();
 }
connector IOConnector { 
	 role blockstorage() = token?j -> process -> stored -> blockstorage();
	 role extsupplier(j) = process -> token!j -> extsupplier(j);
 }
component PassengerUI { 
	 port call() = callride->call();
	 port pay() = issuepay->pay();
	 port plogin() = login->plogin();
}
component TripMgmt { 
	 port accept() = acknowledged->accept();
}
component DriverUI { 
	 port notify() = notified->notify();
	 port dlogin() = login->dlogin();
	 port locate() = located->locate();
}
component DriverRecord { 
	 port driverquery() = quried->driverquery();
	 port driverupdate() = updated->driverupdate();
}
component Payment { 
	 port record() = payrecorded->record();
	 port list() = listed->list();
}
component BillingGateway { 
	 port process() = processed->process();
}
component SignOn { 
	 port auth() = authenticated->auth();
}
component UserDB { 
	 port find() = queried->find();
}
component AssignLog { 
	 port logassign() = logged->logassign();
}
component DriverCommandLog { 
	 port logdriver() = logged->logdriver();
}

system rideshare {
	 declare callwire = CSConnector; 
	 declare assignwire = ESConnector; 
	 declare driverquerywire = QRConnector; 
	 declare authwire = CSConnector; 
	 declare userquerywire = REConnector; 
	 declare driverupdatewire = CRConnector; 
	 declare paywire = WRConnector; 
	 declare billwire = REConnector; 
	 attach PassengerUI.call() = callwire.requester(10);
	 attach TripMgmt.accept() = callwire.responder() <*> driverquerywire.querier(51) <*> assignwire.eventpublisher(94);
	 attach DriverUI.notify() = assignwire.eventsubscriber();
	 attach DriverUI.locate() = driverupdatewire.commander(95);
	 attach DriverRecord.driverquery() = driverquerywire.readstore();
	 attach DriverRecord.driverupdate() = driverupdatewire.readstore();
	 attach PassengerUI.pay() = paywire.writer(34);
	 attach PassengerUI.plogin() = authwire.requester(57);
	 attach Payment.record() = paywire.writestorage();
	 attach Payment.list() = billwire.readstorage();
	 attach BillingGateway.process() = billwire.reader(85);
	 attach SignOn.auth() = authwire.responder() <*> userquerywire.reader(80);
	 attach UserDB.find() = userquerywire.readstorage();
	 attach AssignLog.logassign() = assignwire.eventstore();
	 attach DriverCommandLog.logdriver() = driverupdatewire.commandstore();
	 execute PassengerUI.call() || TripMgmt.accept() || DriverUI.notify() || DriverRecord.driverquery() || DriverRecord.driverupdate() || PassengerUI.plogin() || PassengerUI.pay() || BillingGateway.process() || Payment.record() || Payment.list() || SignOn.auth() || UserDB.find() || AssignLog.logassign() || DriverCommandLog.logdriver();
}

1.2 The behavioral properties specifications of the rideshare system:

assert rideshare |= []  (PassengerUI.call.callride -> <> TripMgmt.accept.acknowledged);
assert rideshare |= []  (PassengerUI.call.callride -> <> DriverRecord.driverquery.quried);
assert rideshare |= []  (PassengerUI.call.callride -> <> DriverUI.notify.notified);
assert rideshare |= []  (DriverUI.locate.located -> <> DriverRecord.driverupdate.updated);
assert rideshare |= []  (DriverUI.locate.located -> <> DriverCommandLog.logdriver.logged); 
assert rideshare |= []  (PassengerUI.pay.issuepay -> <> Payment.record.payrecorded); 
assert rideshare |= []  (PassengerUI.plogin.located -> <> SignOn.auth.authenticated); 
assert rideshare |= []  (PassengerUI.plogin.located -> <> UserDB.find.queried); 
assert rideshare |= []  (BillingGateway.process.processed -> <> Payment.list.listed); 

